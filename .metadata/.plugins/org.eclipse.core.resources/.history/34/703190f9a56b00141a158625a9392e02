package com.seanharger.chatapp.view;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.net.Inet4Address;
import java.net.UnknownHostException;
import java.util.List;

import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JMenu;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTabbedPane;
import javax.swing.border.EmptyBorder;

import com.seanharger.chatapp.model.chatroom.Chatroom;
import com.seanharger.chatapp.model.chatroom.ChatroomID;
import com.seanharger.chatapp.view.roompanel.ChatroomPanel;
import com.seanharger.chatapp.view.roompanel.IViewToChatroomAdapter;

import common.chatroom.IChatroomID;

import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JLabel;

public class MainFrame extends JFrame {

  private static final long serialVersionUID = -2286474795664030747L;
  private IViewToModelAdapter model;
  private JPanel contentPane;
  private final JMenuBar menuBar = new JMenuBar();
  private final JTabbedPane tabbedPane = new JTabbedPane(JTabbedPane.TOP);
  private final JMenu mnRoom = new JMenu("Room");
  private final JMenuItem mntmNewChatroom = new JMenuItem("New chatroom");
  private final JMenuItem mntmInvite = new JMenuItem("Invite");
  private final JMenuItem mntmAskToJoin = new JMenuItem("Ask to Join");
  private final JPanel panelIpAddress = new JPanel();
  private final JLabel lblIpAddress = new JLabel("");

  /**
   * Constructor that setups up the GUI.
   * 
   * @param model
   */
  public MainFrame(IViewToModelAdapter model) {
    this.model = model;
    initGUI();

  }

  /**
   * Selects from the list of chatroomIDs a chatroomID.
   * 
   * @param chatroomIds: a list of IChatroomIDs.
   * @return IChatroodID: the chatroomID that was selected.
   */
  public IChatroomID chooseChatroomToJoin(List<IChatroomID> chatroomIds) {
    IChatroomID selectedRoomId =
        (IChatroomID) JOptionPane.showInputDialog(this, "Select charoom to join.", "Join chatroom",
            JOptionPane.QUESTION_MESSAGE, null, chatroomIds.toArray(), null);
    return selectedRoomId;
  }

  /**
   * Pop-ups up a JOptionPane window to ask the host what user
   * to invite to the chatroom.
   * 
   * @param chatrooms: the selected chatroom.
   * @return
   */
  public Chatroom chooseChatroomToInvite(List<Chatroom> chatrooms) {
    Chatroom selectedRoom =
        (Chatroom) JOptionPane.showInputDialog(this, "Select chatroom to invite user to.",
            "Invite to chatroom", JOptionPane.QUESTION_MESSAGE, null, chatrooms.toArray(), null);
    return selectedRoom;
  }

  /**
   * A JOptionPane window that pop-ups to display an
   * informative message. 
   * 
   * @param title: header for the message box.
   * @param message: the message to be displayed.
   */
  public void showInformationDialog(String title, String message) {
    JOptionPane.showMessageDialog(this, message, title, JOptionPane.INFORMATION_MESSAGE);
  }

  /**
   * A JOptionPane window that pop-ups to display
   * the error that has occurred.
   * 
   * @param title: header for the message box.
   * @param errorMessage: the error message to be displayed.
   */
  public void showErrorDialog(String title, String errorMessage) {
    JOptionPane.showMessageDialog(this, errorMessage, title, JOptionPane.ERROR_MESSAGE);
  }

  /**
   * A JOptionPane window that pop-ups to prompt
   * a question that requires a yes or no response.
   * 
   * @param title: header for the message box.
   * @param question: the question to be displayed.
   * @return
   */
  public boolean displayQuestionMessage(String title, String question) {
    return (JOptionPane.showConfirmDialog(this, question, title, JOptionPane.YES_NO_OPTION)) == JOptionPane.YES_OPTION;
  }

  /**
   * Shows the GUI window.
   */
  public void start() {
    this.setVisible(true);
  }

  /**
   * Adds a new chatroom to the GUI.
   * 
   * @param name: string that represents the name of the chatroom.
   * @param chatroom: IViewToChatroomAdapter for the new chatroom.
   * @return
   */
  public ChatroomPanel makeChatroomPanel(String name, IViewToChatroomAdapter chatroom) {
    ChatroomPanel newPanel = new ChatroomPanel(chatroom);
    tabbedPane.add(name, newPanel);
    return newPanel;
  }

  /**
   * Removes the panel from the GUI.
   * 
   * @param panel
   */
  public void removeChatroomPanel(ChatroomPanel panel) {
    tabbedPane.remove(panel);
  }

  /**
   * Method to setup all the components on the GUI when starting 
   * the program.
   */
  public void initGUI() {
    JFrame thisMainFrame = this;

    this.addWindowListener(new WindowAdapter() {
      @Override
      public void windowClosing(java.awt.event.WindowEvent windowEvent) {
        model.quit();
      }
    });

    try {
      lblIpAddress.setText("IP Address: " + Inet4Address.getLocalHost().getHostAddress());
    } catch (UnknownHostException e1) {
      e1.printStackTrace();
    }

    this.setSize(600, 500);
    this.setLocation(100, 100);
    this.setMinimumSize(new Dimension(600, 500));

    setTitle("ChatApp");
    setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    contentPane = new JPanel();
    contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
    contentPane.setLayout(new BorderLayout(0, 0));
    setContentPane(contentPane);

    JMenu mnFile = new JMenu("File");
    menuBar.add(mnFile);
    mntmNewChatroom.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent e) {
        String newRoomName =
            JOptionPane.showInputDialog(thisMainFrame, "Enter the name of the chatroom.",
                "Chatroom Name", JOptionPane.QUESTION_MESSAGE);
        if (newRoomName != null && newRoomName.length() > 0) {
          model.createChatroom(newRoomName);
        }
      }
    });

    mnFile.add(mntmNewChatroom);
    setJMenuBar(menuBar);

    menuBar.add(mnRoom);
    mntmAskToJoin.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent e) {
        String ipAddress =
            JOptionPane.showInputDialog(thisMainFrame,
                "Enter the IP address of the remote user to connect to.", "Ask to Join",
                JOptionPane.QUESTION_MESSAGE);
        if (ipAddress != null) {
          model.requestToJoin(ipAddress);
        }
      }
    });

    mnRoom.add(mntmAskToJoin);
    mntmInvite.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent e) {
        String ipAddress =
            JOptionPane.showInputDialog(thisMainFrame,
                "Enter the IP address of the remote user to invite.", "Invite user",
                JOptionPane.QUESTION_MESSAGE);
        if (ipAddress != null) {
          model.inviteToChatroom(ipAddress);
        }
      }
    });

    mnRoom.add(mntmInvite);

    contentPane.add(tabbedPane, BorderLayout.CENTER);

    contentPane.add(panelIpAddress, BorderLayout.SOUTH);

    panelIpAddress.add(lblIpAddress);
  }
}
