import java.lang.NullPointerException;

import javax.swing.text.html.HTMLDocument.Iterator;
class SparseDoubleVector extends ADoubleVector{
  
  private int vectorLength;
  private double offset;
  private ISparseArray<Double> dict = new SparseArray<Double>();
  
  
  public SparseDoubleVector (int firstArg, double secondArg){//23456782345678    
    vectorLength = firstArg;
    offset = secondArg;      
  }
  
  public double getItem(int theIndex) throws OutOfBoundsException {//returns an from the specificed index
    if (theIndex <= -1 ){
      throw new OutOfBoundsException("Index does not exist.");
    }
    if (theIndex == vectorLength){   
      throw new OutOfBoundsException("Index does not exist.");
    }
    for (IIndexedData<Double> i : dict){
      i.getData();
    }
    if (dict.get(theIndex) == null){
      return offset;}
    else{
      return dict.get(theIndex) + offset;
    }   
  }
  
  public void addMyselfToHim(IDoubleVector addThisOne) throws OutOfBoundsException {// adds a value to the value at the index     
    if(addThisOne.getLength() != vectorLength){
      throw new OutOfBoundsException("Lengths do not match up.");
    }
    /*for(int i = 0; i < vectorLength; i++){
      if (dict.get(i) == null){
        continue;
      }
      addThisOne.setItem(i, addThisOne.getItem(i)+dict.get(i) + (offset/2.0));     
    }This Works Above*/
    
    java.util.Iterator<IIndexedData<Double>> it = dict.iterator();
    while(it.hasNext()){
      IIndexedData holding = it.next();
      int thePosition = holding.getIndex();
      if(thePosition == 0){
        System.out.println(holding.getData());
      }
      addThisOne.setItem(thePosition, addThisOne.getItem(thePosition) + dict.get(thePosition) );
    }
  }
  
  public void addToAll (double addMe){// adds a value to all the values in the list   
    offset = offset + addMe;    
  }
  
  public long getRoundedItem(int whichOne){// returns value rounded up to an integer   
    double value = dict.get(whichOne) + offset; ///23.8764367843;
    long rounded = (long) Math.round(value);    
    return rounded;    
  }
  
  public void normalize(){// divides all the elements by the length of the list     
    double i = l1Norm();   
    for ( int j = 0; j < vectorLength; j++){
      if(dict.get(j) == null){
        continue;
      }
      dict.put(j, (dict.get(j))/ i);
    }
    offset /= i;
  }
  
  public int getLength(){// gets the length of the list
    return vectorLength;
  }
  
  public double l1Norm(){//the sum of all entries
    double sum = 0;
    for (IIndexedData<Double> i : dict){ 
      sum += i.getData();
    }
    return sum + (vectorLength)*offset;   
  }
  
  public String toString(){//vector into a string 
    String str = " ";
    return str;
  }
  
  public void setItem (int whichOne, double setToMe) throws OutOfBoundsException{
    if(whichOne == vectorLength){
      throw new OutOfBoundsException("Index does not exist.");
    }
    if(whichOne <= -1){
      throw new OutOfBoundsException("Index does not exist.");
    }

    dict.put(whichOne, setToMe + offset);//    dict.put(whichOne, setToMe - offset );
    
  }
  
}






