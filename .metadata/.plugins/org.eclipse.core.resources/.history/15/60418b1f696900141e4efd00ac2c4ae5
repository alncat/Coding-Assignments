package com.seanharger.chatapp.model;

import java.net.Inet4Address;
import java.net.UnknownHostException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.ArrayList;
import java.util.List;

import provided.datapacket.ADataPacketAlgoCmd;
import provided.datapacket.DataPacket;
import provided.datapacket.DataPacketAlgo;
import provided.rmiUtils.IRMIUtils;
import provided.rmiUtils.IRMI_Defs;
import provided.rmiUtils.RMIUtils;
import provided.util.IVoidLambda;

import com.seanharger.chatapp.model.chatroom.Chatroom;
import com.seanharger.chatapp.model.chatroom.IChatroomToViewAdapter;
import com.seanharger.chatapp.model.message.connect.ChatroomInviteMessage;
import com.seanharger.chatapp.model.message.connect.ChatroomsListMessage;
import com.seanharger.chatapp.model.message.connect.RequestChatroomMessage;

import common.ICmd2ModelAdapter;
import common.chatroom.IChatroomID;
import common.message.NullMessage;
import common.message.connect.IChatroomInviteMessage;
import common.message.connect.IChatroomsListMessage;
import common.message.connect.IConnectMessage;
import common.message.connect.IGetChatroomsListMessage;
import common.message.connect.IRejectRequestMessage;
import common.message.connect.IRequestChatroomMessage;
import common.user.IUser;
import common.user.IUserRMIWrapper;

public class ChatAppModel {

  private IModelToViewAdapter view;

  private Registry registry;

  private ArrayList<Chatroom> chatrooms;

  private IUser thisUser;
  private IUser remoteUser;

  private IUserRemote thisUserRemote = new IUserRemote() {

    @Override
    public DataPacket<? extends IConnectMessage> sendMessage(
        DataPacket<? extends IConnectMessage> message) throws RemoteException {
      return message.execute(connectHost, new Object[] {});
    }

  };

  private DataPacketAlgo<DataPacket<? extends IConnectMessage>, Object> connectHost =
      new DataPacketAlgo<DataPacket<? extends IConnectMessage>, Object>(
          new ADataPacketAlgoCmd<DataPacket<? extends IConnectMessage>, Object, Object>() {

            /** Serial ID. */
            private static final long serialVersionUID = 1575617045646257538L;

            @Override
            public DataPacket<? extends IConnectMessage> apply(Class<?> index,
                DataPacket<Object> host, Object... params) {
              // TODO Auto-generated method stub
              return null;
            }

            @Override
            public void setCmd2ModelAdpt(ICmd2ModelAdapter cmd2ModelAdpt) {

            }
          }) {

        /** Serial version UID */
        private static final long serialVersionUID = 8869605572432428186L;

        /** Anonymous constructor for the DataPacketAlgo */
        {
          setCmd(IGetChatroomsListMessage.class,
              new ADataPacketAlgoCmd<DataPacket<? extends IConnectMessage>, Object, Object>() {

                /** Serial ID */
                private static final long serialVersionUID = 3982132619939006944L;

                @Override
                public DataPacket<? extends IConnectMessage> apply(Class<?> index,
                    DataPacket<Object> host, Object... params) {
                  ChatroomsListMessage msg = new ChatroomsListMessage();
                  for (Chatroom c : chatrooms) {
                    msg.addRoom(c.getChatroomID());
                  }
                  return new DataPacket<IChatroomsListMessage>(IChatroomsListMessage.class, msg);
                }

                @Override
                public void setCmd2ModelAdpt(ICmd2ModelAdapter cmd2ModelAdpt) {

                }

              });

          setCmd(IChatroomsListMessage.class,
              new ADataPacketAlgoCmd<DataPacket<? extends IConnectMessage>, Object, Object>() {

                private static final long serialVersionUID = 3982132619939006944L;

                @Override
                public DataPacket<? extends IConnectMessage> apply(Class<?> index,
                    DataPacket<Object> host, Object... params) {

                  IChatroomsListMessage chatlistMessage = (IChatroomsListMessage) host.getData();
                  List<IChatroomID> roomIds = chatlistMessage.getChatroomIDs();
                  view.setChatroomOptions(roomIds);
                  return new DataPacket<NullMessage>(NullMessage.class, NullMessage.SINGLETON);
                }

                @Override
                public void setCmd2ModelAdpt(ICmd2ModelAdapter cmd2ModelAdpt) {

                }

              });

          setCmd(IRejectRequestMessage.class,
              new ADataPacketAlgoCmd<DataPacket<? extends IConnectMessage>, Object, Object>() {

                private static final long serialVersionUID = 3133555369876569653L;

                @Override
                public DataPacket<? extends IConnectMessage> apply(Class<?> index,
                    DataPacket<Object> host, Object... params) {
                  view.showInformationDialog("Request rejected",
                      "Your request to join was rejected.");
                  return new DataPacket<NullMessage>(NullMessage.class, NullMessage.SINGLETON);
                }

                @Override
                public void setCmd2ModelAdpt(ICmd2ModelAdapter cmd2ModelAdpt) {

                }
              });

          setCmd(IRequestChatroomMessage.class,
              new ADataPacketAlgoCmd<DataPacket<? extends IConnectMessage>, Object, Object>() {

                private static final long serialVersionUID = 3133555369876569653L;

                @Override
                public DataPacket<? extends IConnectMessage> apply(Class<?> index,
                    DataPacket<Object> host, Object... params) {
                  IRequestChatroomMessage request = (IRequestChatroomMessage) host.getData();
                  for (Chatroom room : chatrooms) {
                    if (room.getChatroomID().equals(request.getChatroomID())) {
                      ChatroomInviteMessage invite =
                          new ChatroomInviteMessage(room.getChatroomID(), room.getUserStubs());
                      return new DataPacket<IChatroomInviteMessage>(IChatroomInviteMessage.class,
                          invite);

                    }
                  }
                  return new DataPacket<NullMessage>(NullMessage.class, NullMessage.SINGLETON);
                }

                @Override
                public void setCmd2ModelAdpt(ICmd2ModelAdapter cmd2ModelAdpt) {

                }
              });

          setCmd(IChatroomInviteMessage.class,
              new ADataPacketAlgoCmd<DataPacket<? extends IConnectMessage>, Object, Object>() {

                private static final long serialVersionUID = 3133555369876569653L;

                @Override
                public DataPacket<? extends IConnectMessage> apply(Class<?> index,
                    DataPacket<Object> host, Object... params) {
                  IChatroomInviteMessage invite = (IChatroomInviteMessage) host.getData();
                  System.out.println("I was invited to " + invite.getChatroomID());
                  Chatroom newRoom =
                      new Chatroom(invite.getChatroomID().toString(), thisUser,
                          IChatroomToViewAdapter.NULL_OBJECT, invite.getMemberAdapters());
                  newRoom.installAdapter(view.makeChatroomToViewAdapter(newRoom));
                  return new DataPacket<NullMessage>(NullMessage.class, NullMessage.SINGLETON);
                }

                @Override
                public void setCmd2ModelAdpt(ICmd2ModelAdapter cmd2ModelAdpt) {

                }
              });
        }
      };

  /**
   * Factory for the Registry and other uses.
   */
  IRMIUtils rmiUtils = new RMIUtils(new IVoidLambda<String>() {

    @Override
    public void apply(String... params) {

    }

  });

  public ChatAppModel(IModelToViewAdapter view) {
    this.view = view;
    this.chatrooms = new ArrayList<Chatroom>();


  }

  public void makeRoom(String name) {
    Chatroom room;

    for (Chatroom theRoom : chatrooms) {
      if (theRoom.getName().equals(name)) {
        
        return;
      }
    }
    
    room = new Chatroom(name, thisUser, IChatroomToViewAdapter.NULL_OBJECT);
    room.installAdapter(view.makeChatroomToViewAdapter(room));
    chatrooms.add(room);
  }

  public void start() {
    rmiUtils.startRMI(IRMI_Defs.CLASS_SERVER_PORT_SERVER);

    try {
      IUserRemote thisUserStub =
          (IUserRemote) UnicastRemoteObject.exportObject(thisUserRemote, 2101);

      this.thisUser =
          new User(System.getProperty("user.name"), (Inet4Address) Inet4Address.getLocalHost(),
              thisUserStub);

      registry = rmiUtils.getLocalRegistry();

      IUserRMIWrapper registryWrapper = new IUserRMIWrapper() {

        @Override
        public IUser getUser() throws RemoteException {
          return thisUser;
        }
      };

      IUserRMIWrapper registryWrapperRemote =
          (IUserRMIWrapper) UnicastRemoteObject.exportObject(registryWrapper, 2101);

      registry.rebind(IUserRMIWrapper.BOUND_NAME, registryWrapperRemote);
    } catch (Exception e) {
      System.err.println("ComputeEngine exception:" + "\n");
      e.printStackTrace();
      System.exit(-1);
    }

  }

  public void stop() {
    try {
      rmiUtils.stopRMI();
    } catch (Exception e) {
      System.err.println("Error stopping RMI server: " + e);
    }
    System.exit(0);
  }

  public void getChatrooms(String remoteHost) {
    try {
      Registry registry = rmiUtils.getRemoteRegistry(remoteHost);
      remoteUser = ((IUserRMIWrapper) registry.lookup(IUserRMIWrapper.BOUND_NAME)).getUser();

      System.out.println("connected to: " + remoteUser);

      DataPacket<? extends IConnectMessage> response =
          remoteUser.sendMessage(new DataPacket<IGetChatroomsListMessage>(
              IGetChatroomsListMessage.class, null));
      response.execute(connectHost, new Object[] {});

    } catch (RemoteException e) {
      e.printStackTrace();
      System.exit(-1);
    } catch (NotBoundException e) {
      e.printStackTrace();
      System.exit(-1);
    }
  }

  public void requestToJoin(IChatroomID chatroomId) {
    try {
      DataPacket<? extends IConnectMessage> test =
          new DataPacket<IRequestChatroomMessage>(IRequestChatroomMessage.class,
              new RequestChatroomMessage(chatroomId));
      DataPacket<? extends IConnectMessage> response = remoteUser.sendMessage(test);
      response.execute(connectHost, new Object[] {});
    } catch (RemoteException e) {
      e.printStackTrace();
    }
  }

}
