import java.util.*;
/*
 * RowMajorDoubleMatrix is implemented as an
ISparseArray of rows, where each row is itself an IDoubleVector object.

 */ 
class RowMajorDoubleMatrix implements IDoubleMatrix{
  
  private IDoubleMatrix buildMatrix;
  private IDoubleVector element, pullRow, pullColumn, placeVal, placeCol, grabValue, changeVal, vecRowSum, vecColSum,allSumCol, holdCol, holdRow;
  private ArrayList<IDoubleVector> columnHolder;
  

  public RowMajorDoubleMatrix(int rows, int cols, double initialVal){//build the matrix with the correct parameters
    element = new DenseDoubleVector(rows, initialVal);
    columnHolder = new ArrayList<IDoubleVector>();

      for (int i = 0; i < cols; i++){
        columnHolder.add(i, element);
      }
    

  }
  
  
  /** 
   * This returns the i^th row in the matrix.  Note that the row that
   * is returned may contain one or more references to data that are
   * actually contained in the matrix, so if the caller modifies this
   * row, it could end up modifying the row in the underlying matrix in
   * an unpredicatble way.  If i exceeds the number of rows in the matrix
   * or it is less than zero, an OutOfBoundsException is thrown.
   */
  public IDoubleVector getRow (int i) throws OutOfBoundsException{
    if (i >= columnHolder.size() || i < 0){// test the bounds for the input
      throw new OutOfBoundsException("Input exceeds max index.");

    }
    pullRow = new DenseDoubleVector(columnHolder.size(),0); // will hold all the indices for the row
    placeVal = new DenseDoubleVector(element.getLength(),0); //alias vector to get values out of matrix
    for (int j = 0; j < columnHolder.size(); j++){
    placeVal = columnHolder.get(j);
    pullRow.setItem(j, placeVal.getItem(i));
    }
  
  return pullRow;}
  
  /** 
   * This returns the j^th column in the matrix.  All of the comments
   * above regarding getRow apply.  If j exceeds the number of columns in the
   * matrix or it is less than zero, an OutOfBoundsException is thrown.
   */
  public IDoubleVector getColumn (int j) throws OutOfBoundsException{
if (j >= element.getLength() || j < 0){//test the bounds of the parameter
      throw new OutOfBoundsException("Input exceeds max index.");

    }
  return columnHolder.get(j);}
  
  /**
   * This sets the i^th row of the matrix.  After the row is inserted into
   * the matrix, the matrix "owns" the row and it is free to do whatever it
   * wants to it, including modifying the row.  If i exceeds the number of rows
   * in the matrix or it is less than zero, an OutOfBoundsException is thrown.
   */
  public void setRow (int i, IDoubleVector setToMe) throws OutOfBoundsException{
    if (i >= columnHolder.size() || i < 0){//test the bounds of the parameter
      throw new OutOfBoundsException("Input exceeds max index.");

    }
    int len = element.getLength();
    pullColumn = new DenseDoubleVector(0,0); //empty vector to grab row from matrix
    placeCol = new DenseDoubleVector(len,0);// holds a copy of the vector
    for( int j = 0; j <columnHolder.size(); j++){//goes through all the rows in the matrix
    pullColumn = columnHolder.get(j);// places a copy here in the empty vector
    
    
    for (int x = 0; x < pullColumn.getLength(); x++){// copies all the indices of the vector
      
    placeCol.setItem(x, pullColumn.getItem(x));
    
    }
    
    placeCol.setItem(i, setToMe.getItem(j));//changes the single
    
    columnHolder.set(j, placeCol);//add back to the matrix
    
    placeCol = new DenseDoubleVector(len, 0);//emptys the vector
    }
  
  return;}
  
  /**
   * This sets the j^th column of the matrix.  All of the comments above for
   * the "setRow" method apply to "setColumn".  If j exceeds the number of columns
   * in the matrix or it is less than zero, an OutOfBoundsException is thrown.
   */
  public void setColumn (int j, IDoubleVector setToMe) throws OutOfBoundsException{
    if (j >= element.getLength() || j < 0){//test the bounds of the parameters
      throw new OutOfBoundsException("Input exceeds max index.");

    }
    columnHolder.set(j, setToMe);//changes the column in the matrix
    
  return;}
  
  /**
   * Returns the entry in the i^th row and j^th column in the matrix.
   * If i or j are less than zero, or if j exceeds the number of columns
   * or i exceeds the number of rows, then an OutOfBoundsException is thrown.
   */
  public double getEntry (int i, int j) throws OutOfBoundsException{
    if (i >= columnHolder.size() || i < 0){//test the bounds of the matrix
      throw new OutOfBoundsException("Input exceeds max index.");
    }
      
    if (j >= element.getLength() || j < 0){//tests the bounds of the matrix
      throw new OutOfBoundsException("Input exceeds max index.");
    }
    grabValue = new DenseDoubleVector(element.getLength(),0);
    grabValue = columnHolder.get(i);//gets the correct column
    
  return grabValue.getItem(j);}
  
  /**
   * Sets the entry in the i^th row and j^th column in the matrix.
   * If i or j are less than zero, or if j exceeds the number of columns
   * or i exceeds the number of rows, then an OutOfBoundsException is thrown.
   */
  public void setEntry (int i, int j, double setToMe) throws OutOfBoundsException{
    if (i >= columnHolder.size() || i < 0){//tests the bounds of the parameter
      throw new OutOfBoundsException("Input exceeds max index.");
    }
      
    if (j >= element.getLength() || j < 0){//tests the bounds of the parameter
      throw new OutOfBoundsException("Input exceeds max index.");
    }
    changeVal = new DenseDoubleVector(element.getLength(),0);//empty vector that will alias the vector in the matrix
    grabValue = new DenseDoubleVector(element.getLength(), 0);//vector result that will be place back into the matrix
    changeVal = columnHolder.get(i);//copy vector
    changeVal.addMyselfToHim(grabValue);//do addition vector-wise
    grabValue.setItem(j, setToMe);//change value
    columnHolder.set(i,grabValue);
  return;}
  
  /**
   * Adds this particular IDoubleMatrix to the parameter.  Returns an
   * OutOfBoundsException if the two don't match up in terms of their dimensions.
   */
  public void addMyselfToHim (IDoubleMatrix toMe) throws OutOfBoundsException{
    if (toMe.getNumColumns() >= columnHolder.size() || toMe.getNumColumns() < 0){//tests the bounds of the parameter
      throw new OutOfBoundsException("Input exceeds max index.");
    }
      
    if (toMe.getNumRows() >= element.getLength() || toMe.getNumRows() < 0){//tests the bounds of the parameter
      throw new OutOfBoundsException("Input exceeds max index.");
    }

    for (int i = 0; i < toMe.getNumColumns(); i++){//for ith vector
      
    holdRow = new DenseDoubleVector(element.getLength(),0);//vector non -input matrix
    holdCol = new DenseDoubleVector(element.getLength(),0);//vector in toMe
    grabValue = new DenseDoubleVector(element.getLength(), 0);//vector will be added back to matrix
    
    holdRow = columnHolder.get(i);
    holdCol = toMe.getColumn(i); 
    
    for(int j = 0; j < holdRow.getLength(); j++){//for jth element in vector
    grabValue.setItem(j, holdRow.getItem(j));
    }
    holdCol.addMyselfToHim(grabValue);
    
    columnHolder.set(i, grabValue);
    }
  return;}

  /** 
   * Sums all of the rows of this IDoubleMatrix.
   */
  public  IDoubleVector sumRows (){
    vecRowSum = new DenseDoubleVector(columnHolder.size(),0);
    holdRow = new DenseDoubleVector(element.getLength(),0);
    double totalSum, add = 0.0;
    for (int i = 0; i < columnHolder.size(); i++){//for the ith vector
      holdRow = columnHolder.get(i);
      for (int j = 0; j < holdRow.getLength(); j++){//for the jth element
        try
        {totalSum = vecRowSum.getItem(j);// compute the sum
      add = holdRow.getItem(j);
      vecRowSum.setItem(j, totalSum+add);}//add the sum back in the summing vector
        catch(OutOfBoundsException E){
       
        }
      }
    }
 
  return vecRowSum;}

  /**
   * Sums all of the columns of this IDoubleMatrix.  Returns the result.
   */
  public IDoubleVector sumColumns (){
    holdCol = new DenseDoubleVector (element.getLength(),0);
    allSumCol = new DenseDoubleVector(element.getLength(),0);
    holdRow = new DenseDoubleVector(element.getLength(), 0);
    double singleColSum = 0.0;
    
    for (int i = 0; i < columnHolder.size(); i++){// for ith vector
    holdCol = columnHolder.get(i);
    for(int j = 0; j < holdCol.getLength(); j++){// for jth element in vector
      try{
      singleColSum = allSumCol.getItem(i);
      allSumCol.setItem(i, holdCol.getItem(j) + singleColSum);//add the result into the vector
      }catch(OutOfBoundsException E){}

    }
    }
  return allSumCol;}

  /**
   * Returns the number of rows in the matrix.
   */
  public int getNumRows (){
  return element.getLength();}
  
  /**
   * Returns the number of columns in the matrix.
   */
  public int getNumColumns (){
  return columnHolder.size();}
  }