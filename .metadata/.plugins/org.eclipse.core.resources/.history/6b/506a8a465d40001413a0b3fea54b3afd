import java.util.*;

class DenseDoubleVector extends ADoubleVector{
  
  private int vectorLength;
  private double offset;
  private double[] buildArray;
  
  public DenseDoubleVector (int firstArg, double secondArg){  
    vectorLength = firstArg;
    offset = secondArg;
    buildArray = new double[firstArg];    
  }
  
  public double getItem(int theIndex) throws OutOfBoundsException {//returns an from the specificed index
    return offset + buildArray[theIndex];   
  }
  
  public void addMyselfToHim (IDoubleVector addToHim) throws OutOfBoundsException {// adds a value to the value at the index      
    for (int i = 0; i < buildArray.length; i++){
      //System.out.println("Before: " + buildArray[i]);
      buildArray[i] += buildArray[i] + addToHim.getItem(i);
      //System.out.println("After: " + buildArray[i])
      
    }   
  }
  
  public void addToAll (double addMe){// adds a value to all the values in the list  
    offset = offset + addMe;
  }
  
  public long getRoundedItem(int whichOne){// returns value rounded up to an integer   
    double value = buildArray[whichOne] + offset; 
    long rounded = Math.round(value);   
    return rounded;  
  }
  
  public void normalize(){// divides all the elements by the length of the list
    double i = l1Norm();  
    for ( int j = 0; j < buildArray.length; j++){
      buildArray[j] = (buildArray[j])/ i;
    }
    offset /= i;  
  }
  
  public int getLength(){// gets the length of the list
    return buildArray.length;
  }
  
  public double l1Norm(){//the sum of all entries 
    double sum = 0, fake = 0;
    for (int i = 0; i < buildArray.length; i++){
      sum = sum + buildArray[i] + offset;     
    }
    return sum;   
  }
  
  public String toString(){//vector into a string   
    String str = " ";    
    return str;
  }
  
  public void setItem (int whichOne, double setToMe)throws OutOfBoundsException{    
    double setResult = setToMe - offset;
    buildArray[whichOne] = setResult;
  }
}

