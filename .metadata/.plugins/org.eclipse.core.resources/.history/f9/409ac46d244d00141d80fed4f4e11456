import junit.framework.TestCase;

/**
 * A JUnit test case class.
 * Every method starting with the word "test" will be called when running
 * the test with JUnit.
 */

public class DoubleMatrixTester extends TestCase{


  public void testOutofBounds(){//tests all the boundary limits of all the methods
  IDoubleMatrix matrixRow = new  ColumnMajorDoubleMatrix(3, 5, -100.9);
  IDoubleMatrix rowMajor = new RowMajorDoubleMatrix(3,5, -1.2);
  
  
  try{int testBoolean = 0; 
    matrixRow.getRow(110);
  assertTrue(testBoolean == 1);//test fails if method does not throw out of bounds expection
  }
  catch(OutOfBoundsException e){
    int testBoolean = 1;
    assertTrue( testBoolean == 1);
  }
  
  try{int testBoolean = 0; 
    matrixRow.getColumn(110);
  assertTrue(testBoolean == 1);//test fails if method does not throw out of bounds expection
  }
  catch(OutOfBoundsException e){
    int testBoolean = 1;
    assertTrue( testBoolean == 1);
  }
  
  try{int testBoolean = 0; 
    matrixRow.getEntry(100,110);
  assertTrue(testBoolean == 1);//test fails if method does not throw out of bounds expection
  }
  catch(OutOfBoundsException e){
    int testBoolean = 1;
    assertTrue( testBoolean == 1);
  }
  
  try{int testBoolean = 0; 
    matrixRow.setEntry(111,110, 3.44);
  assertTrue(testBoolean == 1);//test fails if method does not throw out of bounds expection
  }
  catch(OutOfBoundsException e){
    int testBoolean = 1;
    assertTrue( testBoolean == 1);
  }
  
  try{int testBoolean = 0; 
    IDoubleVector temp1 = new DenseDoubleVector(5, -2.3);
    matrixRow.setColumn(110, temp1);
  assertTrue(testBoolean == 1);//test fails if method does not throw out of bounds expection
  }
  catch(OutOfBoundsException e){
    int testBoolean = 1;
    assertTrue( testBoolean == 1);
  }
  
  try{int testBoolean = 0;
    IDoubleVector temp1 = new DenseDoubleVector(5, -2.3);
    matrixRow.setRow(99, temp1);
  assertTrue(testBoolean == 1);//test fails if method does not throw out of bounds expection
  }
  catch(OutOfBoundsException e){
    int testBoolean = 1;
    assertTrue( testBoolean == 1);
  }
  
  try{int testBoolean = 0; 
    rowMajor.getRow(110);
  assertTrue(testBoolean == 1);//test fails if method does not throw out of bounds expection
  }
  catch(OutOfBoundsException e){
    int testBoolean = 1;
    assertTrue( testBoolean == 1);
  }
  
  try{int testBoolean = 0; 
    rowMajor.getColumn(110);
  assertTrue(testBoolean == 1);//test fails if method does not throw out of bounds expection
  }
  catch(OutOfBoundsException e){
    int testBoolean = 1;
    assertTrue( testBoolean == 1);
  }
  
  try{int testBoolean = 0; 
    rowMajor.getEntry(100,110);
  assertTrue(testBoolean == 1);//test fails if method does not throw out of bounds expection
  }
  catch(OutOfBoundsException e){
    int testBoolean = 1;
    assertTrue( testBoolean == 1);
  }
  
  try{int testBoolean = 0; 
    rowMajor.setEntry(111,110, 3.44);
  assertTrue(testBoolean == 1);//test fails if method does not throw out of bounds expection
  }
  catch(OutOfBoundsException e){
    int testBoolean = 1;
    assertTrue( testBoolean == 1);
  }
  
  try{int testBoolean = 0; 
    IDoubleVector temp1 = new DenseDoubleVector(5, -2.3);
    rowMajor.setColumn(110, temp1);
  assertTrue(testBoolean == 1);//test fails if method does not throw out of bounds expection
  }
  catch(OutOfBoundsException e){
    int testBoolean = 1;
    assertTrue( testBoolean == 1);
  }
  
  try{int testBoolean = 0;
    IDoubleVector temp1 = new DenseDoubleVector(5, -2.3);
    rowMajor.setRow(99, temp1);
  assertTrue(testBoolean == 1);//test fails if method does not throw out of bounds expection
  }
  catch(OutOfBoundsException e){
    int testBoolean = 1;
    assertTrue( testBoolean == 1);
  }
  
  return;}

  /** 
   * runs test on get row for both Row and column 
   */
  public void testgetRow (){
  
  
  IDoubleMatrix matrixRow = new  ColumnMajorDoubleMatrix(3, 5, -100.9);
  IDoubleMatrix rowMajor = new RowMajorDoubleMatrix(3,5, -1.2);
  IDoubleVector temp1 = new DenseDoubleVector(3,-1.2);
  IDoubleVector temp2 = new DenseDoubleVector(0,0);
  IDoubleVector empty = new DenseDoubleVector(0,0);
  IDoubleVector vect = new DenseDoubleVector(5,-100.9);
  
  try{
    empty = matrixRow.getRow(2);}
  catch(OutOfBoundsException E){}
  System.out.println("Line 38colmajor: " + empty);
  

  for (int i = 0; i < empty.getLength(); i++){
    try{
    if (vect.getItem(i) != empty.getItem(i)){
      assertTrue("The test for get Column in AMD", vect.getItem(i) == empty.getItem(i));}}
    catch(OutOfBoundsException E){}
  }
  
  try{
  temp2 = rowMajor.getRow(2);
  
  for(int j = 0; j < temp2.getLength(); j++){
    if(temp2.getItem(j) != temp1.getItem(j)){
      assertTrue("Row major column does not match up.", temp2.getItem(j) == temp1.getItem(j));
    }
  }
  }
  catch(OutOfBoundsException E){}
  return;}
  
  /** 
   * runs test on both row and column to get column
   */
  public void testgetColumn () {
    
  IDoubleMatrix matrix = new ColumnMajorDoubleMatrix(3, 5, -2.3);//Generate random numbers to fill in the rows, cols, and intitial value
  IDoubleMatrix rowMajor = new RowMajorDoubleMatrix(3,5, -2.3);
  IDoubleVector temp1 = new DenseDoubleVector(5, -2.3);
  IDoubleVector temp2 = new DenseDoubleVector(0,0);
  IDoubleVector vec = new DenseDoubleVector(0,0); //Creates an empty vector so that I can place things inside of it.
  IDoubleVector vect = new DenseDoubleVector(3, -2.3);
  try{
    vec = matrix.getColumn(4);}
  catch(OutOfBoundsException E){}
  
  for (int i = 0; i < vec.getLength(); i++){
    try{//conduct test for method
      assertTrue("The tes789t for get Column in AMD", vect.getItem(i) == vec.getItem(i));

    }
    catch(OutOfBoundsException E){}
  }
  
  try{//conduct test for method
    temp2 = rowMajor.getColumn(4);
    
    for (int j = 0; j < temp2.getLength(); j++){
      assertTrue("The column for Row major has a problem", temp2.getItem(j) == temp1.getItem(j));

    }
  }
  catch(OutOfBoundsException E){}
  
  return;}
  
  /**
   * runs test on both row and column to set row
   */
  public void testsetRow () {
  IDoubleMatrix matrixRow = new  ColumnMajorDoubleMatrix(5, 5, -100.9);//Create a matrix with all the parameters 
  
  IDoubleVector empty = new SparseDoubleVector(0,0); //Place the setRow into this empty vector
  IDoubleVector test = new DenseDoubleVector(5,-111.2); //Create a vector to test the method setRow with matching inputs 
  IDoubleVector test2 = new DenseDoubleVector(5, -111.2);// Vector that differs from the set Vector
  
  try{
    matrixRow.setRow(1, test);// Call the method to make a change in the matrix
   
  empty = matrixRow.getRow(1);
  }// Place the changed vector into the empty to test the method
  catch(OutOfBoundsException E){}
  
  
  for (int i = 0; i < empty.getLength(); i++){
    try{//conduct test for method
        
    if (test2.getItem(i) != empty.getItem(i)){
      
      assertTrue("The test for get Column in AMD", test2.getItem(i) == empty.getItem(i));
    }}
    catch(OutOfBoundsException E){}
  }
  
  return;}
  
  
  /**
   * runs test on row only to set row
   */
  public void testsetRowRowMajor () {
  
  IDoubleMatrix rowMajor = new RowMajorDoubleMatrix(3,5, -1.2);
  
  IDoubleVector temp1 = new DenseDoubleVector(0,0);//Create a vector to test the method setRow with matching inputs
  IDoubleVector temp2 = new DenseDoubleVector(5,-23.3);//place the setRow into this empty vector
  
  
  try{rowMajor.setRow(0, temp2);
    temp1 = rowMajor.getRow(0);
   
    
    for (int j = 0; j < temp1.getLength(); j++){//loop through all the elements
      
    assertTrue("test for set row in Row major is incorrect", temp2.getItem(j) == temp1.getItem(j));
    }
  }
  catch(OutOfBoundsException E){}
  
  return;}
  
  
//  
  /**
   *runs test on set column for row and column
   */
  public void testsetColumn () {
  IDoubleMatrix matrixRow = new  ColumnMajorDoubleMatrix(3, 5, -10.9);//Create a matrix with all the parameters 
  IDoubleVector emptyVector = new DenseDoubleVector(0,0); //Place the setRow into this empty vector
  IDoubleVector test = new DenseDoubleVector(3,-1.2); //Create a vector to test the method setRow with matching inputs 
  IDoubleVector test2 = new DenseDoubleVector(3, -1.2);// Vector that differs from the set Vector
  
  IDoubleMatrix rowMajor = new RowMajorDoubleMatrix(3,5, -12.234);
  IDoubleVector temp2 = new DenseDoubleVector(3,-1.2); //Create a vector to test the method setRow with matching inputs 
  IDoubleVector temp3 = new DenseDoubleVector(3, -1.2);// Vector that differs from the set Vector
  
  try{
    matrixRow.setColumn(4, test);// Call the method to make a change in the matrix
  emptyVector = matrixRow.getColumn(4);
  }// Place the changed vector into the empty to test the method
  catch(OutOfBoundsException E){}
  
  for (int i = 0; i < emptyVector.getLength(); i++){
    try{//conduct test for method
      assertEquals("The test for get Column in CMD", test2.getItem(i), emptyVector.getItem(i), .1);}
    catch(OutOfBoundsException E){}
  }
  
  try {//conduct test for method
    rowMajor.setColumn(4, temp2);
    for(int j = 0; j < temp2.getLength(); j++){
    assertTrue("the test for row major in set column failed", temp2.getItem(j) == temp3.getItem(j));
    }
  }catch(OutOfBoundsException E){}
  return;}
  
  /**
   *runs test on get entry for row and column
   */
  public void testgetEntry () {
  IDoubleMatrix matrixRow = new  ColumnMajorDoubleMatrix(3, 5, -10.9);//Create a matrix with all the parameters 
  IDoubleMatrix rowMajor = new  RowMajorDoubleMatrix(3, 5, -10.9);//Create a matrix with all the parameters 

  try{//conduct test for method
    matrixRow.setEntry(1,1, -1.100000000001);
    assertEquals(matrixRow.getEntry(1,1), -1.1, 0.1);
  }
  catch(OutOfBoundsException E){}

  try{//conduct test for method
    rowMajor.setEntry(1,1, -1.100000000001);
    assertEquals(rowMajor.getEntry(1,1), -1.1, 0.1);
  }
  catch(OutOfBoundsException E){}
  
  return;
  }
  
  /**
   * runs test on set entry for row and column
   */
  public void testsetEntry () {
  IDoubleMatrix matrixRow = new  ColumnMajorDoubleMatrix(50, 50, -10.9);//Create a matrix with all the parameters 
  
  try{//conduct test for method
    matrixRow.setEntry(24, 45, 474);
    
    assertEquals("Incorrect entry found", matrixRow.getEntry(24,45),474.0);}
  catch(OutOfBoundsException E){}

  try{//conduct test for method
    matrixRow.setEntry(24, 45, -23.123);
    
    assertEquals("Incorrect entry found", matrixRow.getEntry(24,45), -23.123);}
  catch(OutOfBoundsException E){}
  
  return;}
  
  /**
   * runs test on matrix addition for row and column
   */
  public void testaddMyselfToHim () {
    
  IDoubleMatrix matrixOne = new  ColumnMajorDoubleMatrix(3, 5, -100.9);//Create a matrix with all the parameters
  IDoubleMatrix matrixTwo = new ColumnMajorDoubleMatrix (3,5, 60.4);
  
  IDoubleMatrix rowmatrixOne = new  RowMajorDoubleMatrix(5, 3, -160.9);//Create a matrix with all the parameters 
  IDoubleMatrix rowmatrixTwo = new RowMajorDoubleMatrix (5,3, 60.4);
  try{//conduct test for method
    matrixOne.addMyselfToHim(matrixTwo);
    System.out.println( matrixOne.getEntry(0,0));
    assertEquals("Matrices did not add correctly", -40.5, matrixOne.getEntry(0,0), .1);
  }
  catch(OutOfBoundsException E){}
    
  try{//conduct test for method
    rowmatrixOne.addMyselfToHim(rowmatrixTwo);
    assertEquals("Matrices did not add correctly", -100.5, rowmatrixOne.getEntry(0,0), .1);
  }
  catch(OutOfBoundsException E){}
  
  return;}

  /** 
   * tests Sums all of the rows of this IDoubleMatrix.
   */
  public void testsumRows (){//SUM ROWS SEEMS TO BE INCORRECT, GO BACK AND FIX IT
  IDoubleMatrix matrixOne = new  ColumnMajorDoubleMatrix(1, 9, -100.1);//Create a matrix with all the parameters 
  
  IDoubleVector summedVector = new DenseDoubleVector (1, -900.9);
  IDoubleVector compareVector = new DenseDoubleVector(matrixOne.getNumRows(),0);
  
  IDoubleMatrix rowmatrixOne = new  RowMajorDoubleMatrix(3, 2, -100.1);//Create a matrix with all the parameters 
  IDoubleVector rowsummedVector = new DenseDoubleVector (3, -200.2);
  IDoubleVector rowcompareVector = new DenseDoubleVector(matrixOne.getNumRows(),0);
  
  try{//conduct test for method
    compareVector = matrixOne.sumRows();
    for(int i = 0; i < matrixOne.getNumColumns(); i++){//loop through all the elements
      assertEquals("Row sum is incorret.", summedVector.getItem(i), summedVector.getItem(i), .1);
    } 
  }
  catch(OutOfBoundsException E){}
  
  try{//conduct test for method
    rowcompareVector = rowmatrixOne.sumRows();
    for(int i = 0; i < rowmatrixOne.getNumColumns(); i++){//loop through all the elements
      assertEquals("Row sum is incorret.", rowsummedVector.getItem(i), rowsummedVector.getItem(i), .1);
    } 
  }
  catch(OutOfBoundsException E){}
  
  return;}

  /**
   * tests Sums all of the columns of this IDoubleMatrix.  
   */
  public void testsumColumns (){
  IDoubleMatrix matrix = new ColumnMajorDoubleMatrix(3, 5, -1.1);
  IDoubleMatrix rowMajor = new RowMajorDoubleMatrix(3, 5, -5.1);
  IDoubleVector temp1 = new DenseDoubleVector(5,-15.3);
  IDoubleVector temp2 = new DenseDoubleVector(0, 0);
  IDoubleVector vec = new DenseDoubleVector(3,-3.3);
  IDoubleVector vect = new DenseDoubleVector(0, 0);
    
  
  vect = matrix.sumColumns();
  for(int i = 0; i < matrix.getNumColumns(); i++){//loop through all the columns
    try{//conduct test for method
      assertEquals("The rows do not match.", vect.getItem(i), vect.getItem(i),.1);
    }
    catch(OutOfBoundsException E){}}
  
  temp2 = rowMajor.sumColumns();
  
  for (int j = 0; j < rowMajor.getNumColumns(); j++){//loop through all the columns
    try{//conduct test for method
      assertEquals("The sum for row major was not correct in column sums.",temp2.getItem(j), temp2.getItem(j), .1);
    }
    catch(OutOfBoundsException E){}
  }
  return;}

  /**
   * tests the number of rows in the matrix.
   */
  public void testgetNumRows (){
  IDoubleMatrix columnMajor = new ColumnMajorDoubleMatrix(100, 29, -23.2);
  IDoubleMatrix rowMajor = new RowMajorDoubleMatrix(11,14,-374.234);
  System.out.println(columnMajor.getNumRows());
  assertTrue ("The rows do not match.", columnMajor.getNumRows() == 100); //test to see if the input match rows
    assertTrue ("The rows do not match.", columnMajor.getNumRows() != 29);// test to see if rows is not set by columns
    assertTrue ("The rows do not match.", columnMajor.getNumRows() != -23.2);// test to see if rows is not set by initial value
    assertTrue ("The rows do not match for Row Major.", rowMajor.getNumRows() == 11);//test to see if the input match rows
    assertTrue ("The rows do not mathc for row major.", rowMajor.getNumRows() != 14);// test to see if rows is not set by columns
    assertTrue ("The rows do not mathc for row major.", rowMajor.getNumRows() != -374.234);// test to see if rows is not set by initial value
  return;}
//  
  /**
   * tests the number of columns in the matrix.
   */
  public void testgetNumColumns (){
  
    IDoubleMatrix columnMajor = new  ColumnMajorDoubleMatrix(10, 110, -100.9);
    IDoubleMatrix rowMajor = new RowMajorDoubleMatrix(11,14,-374.234);
    assertTrue ("The columns do not match.", columnMajor.getNumColumns() == 110); //test to see if the input match columns
    assertTrue ("The columns do not match.", columnMajor.getNumColumns() != 10);// test to see if columns is not set by rows
    assertTrue ("The columns do not match.", columnMajor.getNumColumns() != -100.9);// test to see if columns is not set by initial value
    assertTrue ("The Columns do not match for Row Major.", rowMajor.getNumColumns() == 14);//test to see if the columns match columns
    assertTrue ("The columns do not mathc for row major.", rowMajor.getNumColumns() != 11);// test to see if columns is not set by rows
    assertTrue ("The columns do not mathc for row major.", rowMajor.getNumColumns() != -374.234);// test to see if columns is not set by initial value
  return;}
  
}