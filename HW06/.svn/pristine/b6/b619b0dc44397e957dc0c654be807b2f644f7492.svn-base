package model.visitors;

import provided.music.APhraseVisitor;
import provided.music.Chord;
import provided.music.IPhrase;
import provided.music.IPhraseVisitor;
import provided.music.IPhraseVisitorCmd;
import provided.music.MTSeqList;
import provided.music.NESeqList;
import provided.music.Note;
import provided.music.Triplet;
import provided.player.SequencePlayer;

public class PlaySongVisitor extends APhraseVisitor {
    
    private IPhraseVisitor playSongVisitor = this;
    
    private static SequencePlayer sequencePlayer;
    private int lastTick = 1;
    
    /**
     * Constructor
     */
    public PlaySongVisitor() {
        
        // default
        super(new IPhraseVisitorCmd() {
            @Override
            public Object apply(String id, IPhrase host, Object... params) {
                return sequencePlayer;
            } 
        });
        
        initSequencePlayer();
        
        // note
        this.addCmd(Note.ID, new IPhraseVisitorCmd() {
            @Override
            public Object apply(String id, IPhrase host, Object... params) {
                lastTick = sequencePlayer.addNote((Note) host, lastTick);
                return sequencePlayer;
            }
        });
        
        // chord
        this.addCmd(Chord.ID, new IPhraseVisitorCmd() {
            @Override
            public Object apply(String id, IPhrase host, Object... params) {
                Chord chord = (Chord) host;
                int last = lastTick;
                for (Note note : chord.getNotes()) {
                    last = sequencePlayer.addNote(note, lastTick);
                }
                lastTick = last;
                return sequencePlayer;
            }
        });
        
        // triplet
        this.addCmd(Triplet.ID, new IPhraseVisitorCmd() {
            @Override
            public Object apply(String id, IPhrase host, Object... params) {
                Triplet triplet = (Triplet) host;
                for (Note note : triplet.getNotes()) {
                    System.out.println(lastTick);
                    note.setDuration(note.getDuration() * 0.66);
                    lastTick = sequencePlayer.addNote(note, lastTick);
                }
                return sequencePlayer;
            }
        });
        
        // empty sequence list
        this.addCmd(MTSeqList.ID, new IPhraseVisitorCmd() {
            @Override
            public Object apply(String id, IPhrase host, Object... params) {
                return sequencePlayer;
            }
        });
        
        // non-empty sequence list
        this.addCmd(NESeqList.ID, new IPhraseVisitorCmd() {
            @Override
            public Object apply(String id, IPhrase host, Object... params) {
                NESeqList neSeqList = (NESeqList) host;
                neSeqList.getFirst().execute(playSongVisitor);
                neSeqList.getRest().execute(playSongVisitor);
                return sequencePlayer;
            }
        });
        
    }
    
    /**
     * Initializes and configures the Sequence Player to default settings. 
     */
    private void initSequencePlayer() {
        sequencePlayer = new SequencePlayer(16, 0);
        sequencePlayer.setTicksPerDefaultNote(16);
        sequencePlayer.setTempo(140);
    }
    
}
