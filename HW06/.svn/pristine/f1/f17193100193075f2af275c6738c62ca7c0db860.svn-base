package model.visitors;

import provided.music.APhraseVisitor;
import provided.music.Chord;
import provided.music.Header;
import provided.music.IPhrase;
import provided.music.IPhraseVisitor;
import provided.music.IPhraseVisitorCmd;
import provided.music.MTSeqList;
import provided.music.NESeqList;
import provided.music.Note;
import provided.music.Triplet;
import provided.player.ISequencePlayerStatus;
import provided.player.SequencePlayer;
import provided.util.ABCUtil;
import provided.util.KeySignature;

/**
 * Visitor capable of playing the music of a IPhrase host.
 */
public class PlaySongVisitor extends APhraseVisitor {
    
    private IPhraseVisitor playSongVisitor = this; // self-referential variable for recursive use
    
    private SequencePlayer sequencePlayer; // responsible for playing the music
    private KeySignature keySignature; // keeps track of which notes are sharp/flat for particular key signature
    private int lastTick = 1; // represents that last tick played 
    
    /**
     * Constructor - loads a default command and commands for various types of IPhrase objects
     */
    public PlaySongVisitor() {
        
        /*
         * Default
         */
        super(new IPhraseVisitorCmd() {
            @Override
            public Object apply(String id, IPhrase host, Object... params) {
                System.err.println("Unrecognzied element parsed of id " + id);
                return params;
            } 
        });
        
        initSequencePlayer();
        
        /*
         * Default headers - no-op
         */
        String headerString = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        for (int i = 0; i < headerString.length(); i++) {
            this.addCmd("" + headerString.charAt(i), new IPhraseVisitorCmd() {
                @Override
                public Object apply(String id, IPhrase host, Object... params) {
                    return params;
                }
            });
        }
        
        /*
         * L header - set default length of a note
         */
        this.addCmd("L", new IPhraseVisitorCmd() { 
            @Override
            public Object apply(String id, IPhrase host, Object... params) {
                Header l = (Header) host;
                sequencePlayer.setTicksPerDefaultNote((int) (ABCUtil.Singleton.parseFraction(l.getValue()) * 64));
                return params;
            }
        });
        
        /*
         * K header - set key signature
         */
        this.addCmd("K", new IPhraseVisitorCmd() { 
            @Override
            public Object apply(String id, IPhrase host, Object... params) {
                Header k = (Header) host;
                keySignature = new KeySignature(k.getValue());
                return params;
            }
        });
        
        /*
         * Q header - set tempo
         */
        this.addCmd("Q", new IPhraseVisitorCmd() { 
            @Override
            public Object apply(String id, IPhrase host, Object... params) {
                Header q = (Header) host;
                sequencePlayer.setTempo((int) ABCUtil.Singleton.parseTempo(q.getValue(), sequencePlayer.getTicksPerQuarterNote() / sequencePlayer.getTicksPerDefaultNote()));
                return params;
            }
        });
        
        /*
         * Note
         */
        this.addCmd(Note.ID, new IPhraseVisitorCmd() {
            @Override
            public Object apply(String id, IPhrase host, Object... params) {
                Note note = (Note) host;
                note = keySignature.adjust(note);
                lastTick = sequencePlayer.addNote(note, lastTick);
                return params;
            }
        });
        
        /*
         * Chord - play all notes simulateneously
         */
        this.addCmd(Chord.ID, new IPhraseVisitorCmd() {
            @Override
            public Object apply(String id, IPhrase host, Object... params) {
                Chord chord = (Chord) host;
                int last = lastTick; // temporary lastTick
                for (Note note : chord.getNotes()) {
                    note = keySignature.adjust(note);
                    last = sequencePlayer.addNote(note, lastTick);
                }
                lastTick = last;
                return params;
            }
        });
        
        /*
         * Triplet - play notes succesively at 2/3 indicated duration
         */
        this.addCmd(Triplet.ID, new IPhraseVisitorCmd() {
            @Override
            public Object apply(String id, IPhrase host, Object... params) {
                Triplet triplet = (Triplet) host;
                for (Note note : triplet.getNotes()) {
                    note = keySignature.adjust(note);
                    note.setDuration(note.getDuration() * 0.66);
                    lastTick = sequencePlayer.addNote(note, lastTick);
                }
                return params;
            }
        });
        
        /*
         * Empty sequence list - plays music since all IPhrase objects is added to sequencePlayer
         */
        this.addCmd(MTSeqList.ID, new IPhraseVisitorCmd() {
            @Override
            public Object apply(String id, IPhrase host, Object... params) {
                sequencePlayer.play(ISequencePlayerStatus.NULL);
                return params;
            }
        });
        
        /*
         * Non-empty sequence list
         */
        this.addCmd(NESeqList.ID, new IPhraseVisitorCmd() {
            @Override
            public Object apply(String id, IPhrase host, Object... params) {
                NESeqList neSeqList = (NESeqList) host;
                neSeqList.getFirst().execute(playSongVisitor);
                neSeqList.getRest().execute(playSongVisitor);
                return params;
            }
        });
        
    }
    
    /**
     * Initializes and configures the Sequence Player to default settings. 
     */
    private void initSequencePlayer() {
        sequencePlayer = new SequencePlayer(16, 0);
        sequencePlayer.init(16, 0);
        sequencePlayer.setTicksPerDefaultNote(16);
        sequencePlayer.setTempo(140);
    }
    
}
